@inject HttpClient Http
@inject AbstractLagoaTradingAuthStateProvider authStateProvider

<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            Histórico de Circuitos
        </div>
        <div class="card-body">
            <span class="card-subtitle mb-2 text-muted" hidden="@(circuits.Count() > 0)">Nenhum circuito para ser exibido</span>
            <table class="table" hidden="@(circuits.Count() == 0)">
                <thead>
                    <tr>
                        <th>Moeda</th>
                        <th>Valor de Compra</th>
                        <th>Valor de Venda</th>
                        <th>Lucro</th>
                        <th>Tempo Transcorrido</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in circuits)
                    {
                        <tr>
                            <td>@item.PositionBuy.FirstOrDefault()?.Symbol</td>
                            <td>@item.PositionBuy.Average(p=>p.Price).TruncateCrypto()</td>
                            <td>@item.PositionSell.Average(p=>p.Price).TruncateCrypto()</td>
                            <td>@item.Profit.TruncateCurrency()</td>
                            <td>@(item.DurationHours <= 0 
                                        ? "Em andamento" 
                                        : item.DurationHours.ToString(ConstantNames.DefaultMasks.DecimalTime))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<CircuitResponse> circuits = new List<CircuitResponse>();

    protected override async Task OnInitializedAsync()
    {
        var hash = await authStateProvider.GetUserHash();
        var url = ConstantNames.ApiRoutes.Circuit;
        var query = new CircuitRequest(hash);
        var queryString = UITool.GetQueryString(query);
        var fullUrl = $"{url}?{queryString}";
        var result = await Http.GetAsync(fullUrl);
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            circuits = JsonConvert.DeserializeObject<List<CircuitResponse>>(content);
        }
    }
}
