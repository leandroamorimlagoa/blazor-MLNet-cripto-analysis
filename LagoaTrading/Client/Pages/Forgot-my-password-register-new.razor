@page "/forgot-password-register-new/{hash}"
@inject HttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@layout PublicLayout


<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-6" hidden="@(hideError)">
            <div class="alert alert-danger" role="alert">
                @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") <br />
                <span>@messageNow</span>
            </div>
        </div>
        <div class="col-lg-6 col-md-8 col-sm-10" hidden="@(!hideError)">
            <div class="card text-center shadow-lg">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title">Sua nova senha</h4>
                </div>
                <div class="card-body text-start">
                    <div class="form-group my-3">
                        <label for="inputPassword">Digite sua nova senha</label>
                        <input type="password" class="form-control" id="inputPassword" placeholder="Digite sua nova senha" required @bind="newpassword">
                    </div>
                    <button type="submit" class="btn btn-primary w-100" @onclick="@HandleValidSubmit">Redefinir minha senha</button>
                </div>
                <div class="card-footer text-center">
                    <p class="">Voltar para <a href="@ConstantNames.Routes.AuthenticateUser">Autenticação</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string hash { get; set; } = "";

    private bool hideError = true;
    private string newpassword = string.Empty;
    private string messageNow = "Houve uma falha ao redefinir sua senha. Repita o processo novamente.";
    private async Task HandleValidSubmit()
    {
        var newPassword = CryptoHelper.Create256(newpassword);
        var model = new ForgotPasswordRegisterNewRequest(hash, newPassword);
        var url = ConstantNames.ApiRoutes.ForgotPasswordRegisterNew;
        var result = await Http.PostAsJsonAsync(url, model);
        if (result.IsSuccessStatusCode)
        {
            var cookieExists = await localStorage.ContainKeyAsync(ConstantNames.LocalStoreNames.AuthenticationToken);
            if (cookieExists)
            {
                await localStorage.RemoveItemAsync(ConstantNames.LocalStoreNames.AuthenticationToken);
                StateHasChanged();
                await Task.Delay(1000);
            }
            navigationManager.NavigateTo(ConstantNames.Routes.AuthenticateUser);
        }
        else
        {
            hideError = false;
            StateHasChanged();
        }
    }
}
